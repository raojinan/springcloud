server:
  port: 19093
spring:
  application:
    name: student-consumer

eureka:
  client:
    service-url:
      defaultZone:  http://localhost:7001/eureka
  instance:
    #指定IP地址
    #ip-address: 127.0.0.1
    #访问服务的时候，推荐使用IP（访问本服务的时候推荐使用此IP，然后在Euraka的状态显示中显示的是Ip地址而不是主机名，消费者获取的时候也是获取ip地址）
    prefer-ip-address: true
# 修改服务地址轮询策略，默认是轮询，配置之后变随机
good-provide: #名字跟服务提供者服务名字一致
  ribbon:
    #轮询
    #NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule
    #随机算法
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule
    ConnectTimeout: 10000 # 连接超时时间
    ReadTimeout: 2000 # 数据读取超时时间
    MaxAutoRetries: 1 # 最大重试次数(第一个服务)
    MaxAutoRetriesNextServer: 0 # 最大重试下一个服务次数(集群的情况才会用到)
    OkToRetryOnAllOperations: false # 无论是请求超时或者socket read timeout都进行重试
    #重试算法,该算法先按照轮询的策略获取服务,如果获取服务失败则在指定的时间内会进行重试，获取可用的服务
    #NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RetryRule
    #加权法,会根据平均响应时间计算所有服务的权重，响应时间越快服务权重越大被选中的概率越大。刚启动时如果同统计信息不足，则使用轮询的策略，等统计信息足够会切换到自身规则。
    #NFLoadBalancerRuleClassName: com.netflix.loadbalancer.ZoneAvoidanceRule
feign:
  hystrix:
    enabled: true # 开启feign熔断器支持：默认关闭
